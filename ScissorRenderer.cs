using OpenGL.Core;

namespace OpenGL.Helper
{
	public static class ScissorRenderer
	{
		static readonly int[] font= {
				0x7E3F, 0xE8D62E, 0xEFFFEE, 0xCF3FCC, 0x477DC4, 0xEA7E8E, 0x677DC6, 0x39CE, // [0] - [7]
				0x1FFEFFF, 0xE8C62E, 0x1F8D63F, 0x1CC58A2, 0x2AEA, 0x23E3, 0x1EB43E3, 0x1576DD5, // [8] - [15]
				0x11DF, 0x7DC4, 0x2BEA, 0x741D, 0x11FC3ED, 0x7B6F, 0xC63, 0x2FEB, // [16] - [23]
				0x23E8, 0xBE2, 0x471084, 0x4211C4, 0x42108C, 0x4711C4, 0x2338C2, 0x863988, // [24] - [31]
				0, 0x1D, 0x6018, 0xAFABEA, 0x12AFEA9, 0x126BAC9, 0x2CAAA, 0x18, // space - '
				0x22E, 0x1D1, 0x2B8A, 0x427C84, 0x41, 0x421084, 0x1, 0x1041041, // ( - /
				0x3A2E, 0x3E8, 0x4D669, 0x2AB1, 0x3C9C, 0x4ABD, 0x5EAF, 0x62D1, // 0 - 7
				0x7EBF, 0x7ABD, 0xA, 0x141, 0x4544, 0x294A, 0x1151, 0x62B0, // 8 - ?
				0xDAD62E, 0x3E8F, 0x2ABF, 0x2A2E, 0x3A3F, 0x46BF, 0x429F, 0x2E2E, // @ - G
				0x7C9F, 0x001F, 0x7822, 0x6C9F, 0x003F, 0x1F4111F, 0xF911F, 0x7462E, // H - O
				0x229F, 0x6CA2E, 0x2E9F, 0x4AA9, 0x43F0, 0x7C3E, 0x783E, 0x1C1907C, // P - W
				0x6C9B, 0x707C, 0x66B3, 0x463F, 0x111110, 0x7E31, 0x2208, 0x108421, // X - _
				0x110, 0x3D26, 0x193F, 0x2526, 0x7D26, 0x36AE, 0x53E4, 0x3AAD, // ` - g
				0x1C9F, 0x17, 0x5822, 0x145F, 0x1F, 0x743D0F, 0x1D0F, 0x1926, // h - o
				0x114F, 0x3D44, 0x10F, 0x16D, 0x27E8, 0x3C2E, 0x382E, 0xE0882E, // p - w
				0x2C8B, 0x304D, 0x1AB, 0x4764, 0x1B, 0x1371, 0x82208, 0x1555555 // x - [127]
			};

		public static void DrawText(string text, int offsetX, int offsetY, int scaleX, int scaleY)
		{
			int x=0;
			foreach(char c in text)
			{
				if(c==' ') { x+=4; continue; }
				if(c>=128) continue;

				int letter=font[c];

				int line=0;
				int y=0;
				for(; ; )
				{
					if((letter&1)!=0)
					{
						gl.Scissor(x*scaleX+offsetX, y*scaleY+offsetY, scaleX, scaleY);
						gl.Clear(glBufferMask.COLOR_BUFFER_BIT);
					}

					letter>>=1;
					if(letter==0) break;

					line++;
					if(line<5) y++;
					else
					{
						y-=4;
						x++;
						line=0;
					}
				}
				x+=2;
			}
		}
	}
}
